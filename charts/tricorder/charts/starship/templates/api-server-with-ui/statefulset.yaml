apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "tricorder.fullname" . }}-startship
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "tricorder.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "tricorder.fullname" . }}-startship
  updateStrategy:
    type: RollingUpdate
  {{- if not .Values.autoscaling.enabled }}
  #replicas: {{ .Values.replicaCount }}
  replicas: 1
  {{- end }}
  selector:
    matchLabels:
      {{- include "tricorder.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.apiServer.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "tricorder.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "tricorder.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.apiServer.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ include "tricorder.fullname" . }}-api-server
          securityContext:
            {{- toYaml .Values.apiServer.securityContext | nindent 12 }}
          image: "{{ .Values.apiServer.image.repository }}:{{ .Values.tag | default .Values.apiServer.image.tag }}"
          imagePullPolicy: {{ .Values.apiServer.image.pullPolicy }}
          args:
            {{- range .Values.apiServer.command.extraArgs }}
            - {{ . }}
            {{- end }}
            - --grafana_url=http://{{ .Release.Name }}-grafana:80
          volumeMounts:
          - name: tricorder-storage-volume
            mountPath: {{ .Values.apiServer.persistentVolumes.data.mountPath | quote }}
            subPath: {{ .Values.apiServer.persistentVolumes.data.subPath | quote }}
          ports:
            {{- range $key, $port := .Values.apiServer.ports }}
            {{- if $port.enabled }}
            - name: {{ $key }}
              containerPort: {{ $port.containerPort }}
              protocol: {{ $port.protocol }}
              {{- if and $.isAgent $port.hostPort }}
              hostPort: {{ $port.hostPort }}
              {{- end }}
            {{- end }}
            {{- end }}
          # TODO(jian)
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          resources:
            {{- toYaml .Values.apiServer.resources | nindent 12 }}
        - name: {{ include "tricorder.fullname" . }}-mgmt-ui
          securityContext:
            {{- toYaml .Values.ui.securityContext | nindent 12 }}
          image: "{{ .Values.ui.image.repository }}:{{ .Values.tag | default .Values.ui.image.tag }}"
          imagePullPolicy: {{ .Values.ui.image.pullPolicy }}
          env:
          - name: API_SERVER_HOST
            value: "localhost"
          - name: API_SERVER_PORT
            value: "8080"
          ports:
            {{- range $key, $port := .Values.ui.ports }}
            {{- if $port.enabled }}
            - name: {{ $key }}
              containerPort: {{ $port.containerPort }}
              protocol: {{ $port.protocol }}
              {{- if and $.isAgent $port.hostPort }}
              hostPort: {{ $port.hostPort }}
              {{- end }}
            {{- end }}
            {{- end }}
          # TODO(jian):
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          resources:
            {{- toYaml .Values.ui.resources | nindent 12 }}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      {{- if not .Values.apiServer.persistentVolumes.data.enabled }}
      - name: tricorder-storage-volume
        emptyDir: {}
      {{- end }}
  volumeClaimTemplates:
  {{- if .Values.apiServer.persistentVolumes.data.enabled }}
    - metadata:
        name: tricorder-storage-volume
        annotations:
        {{- if .Values.apiServer.persistentVolumes.data.annotations }}
          {{ toYaml .Values.apiServer.persistentVolumes.data.annotations | nindent 10 }}
        {{- end }}
        labels:
          {{- include "tricorder.selectorLabels" . | nindent 10 }}
      spec:
        accessModes:
          {{ toYaml .Values.apiServer.persistentVolumes.data.accessModes | nindent 8 }}
        resources:
          requests:
            storage: "{{ .Values.apiServer.persistentVolumes.data.size }}"
      {{- if .Values.apiServer.persistentVolumes.data.storageClass }}
      {{- if (eq "-" .Values.apiServer.persistentVolumes.data.storageClass) }}
        storageClassName: ""
      {{- else }}
        storageClassName: "{{ .Values.apiServer.persistentVolumes.data.storageClass }}"
      {{- end }}
      {{- end }}
  {{- end }}
